create function feature_st() returns void
    language plpgsql
as
$$
BEGIN
drop table if exists short_strength;
create temporary table short_strength as
select *, row_number() over ( partition by date_index order by reported_position) as reported_position_rank
     , row_number() over (partition by date_index order by short_strength) as short_strength_rank from (
select code, date_index, short_position, average_volume, reported_position,
       cast(short_position*1.000/average_volume as decimal(6,3)) as short_strength
  from full_transactions ) t ;

drop table if exists ss_median03;
create temporary table ss_median03 as
select code, date_index, list as mdn_ss_vl_03, row_number() over (partition by date_index order by list) as mdn_ss_rk_03 from (
select code, date_index, list::numeric, row_number() over (partition by code, date_index order by list::numeric) as row_number from (
select code, date_index, json_array_elements_text(json_build_array( ss00, ss01, ss02)) as list from (
select code, date_index, short_strength as ss00
, lag(short_strength, 01) over (partition by code order by date_index) as ss01
, lag(short_strength, 02) over (partition by code order by date_index) as ss02
from short_strength ) t ) t ) t where row_number = 2;

drop table if exists rp_median03;
create temporary table rp_median03 as
select code, date_index, list as mdn_rp_vl_03, row_number() over (partition by date_index order by list) as mdn_rp_rk_03 from (
select code, date_index, list::numeric, row_number() over (partition by code, date_index order by list::numeric) as row_number from (
select code, date_index, json_array_elements_text(json_build_array( rp00, rp01, rp02)) as list from (
select code, date_index, reported_position as rp00
, lag(reported_position, 01) over (partition by code order by date_index) as rp01
, lag(reported_position, 02) over (partition by code order by date_index) as rp02
from short_strength ) t ) t ) t where row_number = 2;

drop table if exists ss_median05;
create temporary table ss_median05 as
select code, date_index, list as mdn_ss_vl_05, row_number() over (partition by date_index order by list) as mdn_ss_rk_05 from (
select code, date_index, list::numeric, row_number() over (partition by code, date_index order by list::numeric) as row_number from (
select code, date_index, json_array_elements_text(json_build_array( ss00, ss01, ss02, ss03, ss04)) as list from (
select code, date_index, short_strength as ss00
, lag(short_strength, 01) over (partition by code order by date_index) as ss01
, lag(short_strength, 02) over (partition by code order by date_index) as ss02
, lag(short_strength, 03) over (partition by code order by date_index) as ss03
, lag(short_strength, 04) over (partition by code order by date_index) as ss04
from short_strength ) t ) t ) t where row_number = 3;

drop table if exists rp_median05;
create temporary table rp_median05 as
select code, date_index, list as mdn_rp_vl_05, row_number() over (partition by date_index order by list) as mdn_rp_rk_05 from (
select code, date_index, list::numeric, row_number() over (partition by code, date_index order by list::numeric) as row_number from (
select code, date_index, json_array_elements_text(json_build_array( rp00, rp01, rp02, rp03, rp04)) as list from (
select code, date_index, reported_position as rp00
, lag(reported_position, 01) over (partition by code order by date_index) as rp01
, lag(reported_position, 02) over (partition by code order by date_index) as rp02
, lag(reported_position, 03) over (partition by code order by date_index) as rp03
, lag(reported_position, 04) over (partition by code order by date_index) as rp04
from short_strength ) t ) t ) t where row_number = 3;

drop table if exists ss_median10;
create temporary table ss_median10 as
select code, date_index, list as mdn_ss_vl_10, row_number() over (partition by date_index order by list) as mdn_ss_rk_10 from (
select code, date_index, list::numeric, row_number() over (partition by code, date_index order by list::numeric) as row_number from (
select code, date_index, json_array_elements_text(json_build_array( ss00, ss01, ss02, ss03, ss04, ss05, ss06, ss07, ss08, ss09)) as list from (
select code, date_index, short_strength as ss00
, lag(short_strength, 01) over (partition by code order by date_index) as ss01
, lag(short_strength, 02) over (partition by code order by date_index) as ss02
, lag(short_strength, 03) over (partition by code order by date_index) as ss03
, lag(short_strength, 04) over (partition by code order by date_index) as ss04
, lag(short_strength, 05) over (partition by code order by date_index) as ss05
, lag(short_strength, 06) over (partition by code order by date_index) as ss06
, lag(short_strength, 07) over (partition by code order by date_index) as ss07
, lag(short_strength, 08) over (partition by code order by date_index) as ss08
, lag(short_strength, 09) over (partition by code order by date_index) as ss09
from short_strength ) t ) t ) t where row_number = 5;

drop table if exists rp_median10;
create temporary table rp_median10 as
select code, date_index, list as mdn_rp_vl_10, row_number() over (partition by date_index order by list) as mdn_rp_rk_10 from (
select code, date_index, list::numeric, row_number() over (partition by code, date_index order by list::numeric) as row_number from (
select code, date_index, json_array_elements_text(json_build_array( rp00, rp01, rp02, rp03, rp04, rp05, rp06, rp07, rp08, rp09)) as list from (
select code, date_index, reported_position as rp00
, lag(reported_position, 01) over (partition by code order by date_index) as rp01
, lag(reported_position, 02) over (partition by code order by date_index) as rp02
, lag(reported_position, 03) over (partition by code order by date_index) as rp03
, lag(reported_position, 04) over (partition by code order by date_index) as rp04
, lag(reported_position, 05) over (partition by code order by date_index) as rp05
, lag(reported_position, 06) over (partition by code order by date_index) as rp06
, lag(reported_position, 07) over (partition by code order by date_index) as rp07
, lag(reported_position, 08) over (partition by code order by date_index) as rp08
, lag(reported_position, 09) over (partition by code order by date_index) as rp09
from short_strength ) t ) t ) t where row_number = 5;

drop table if exists feature_st;
create temporary table feature_st as 
select t.code, t.date_index, t.record_date
, s03.mdn_ss_rk_03, r03.mdn_rp_rk_03
, s05.mdn_ss_rk_05, r05.mdn_rp_rk_05
, s10.mdn_ss_rk_10, r10.mdn_rp_rk_10
from full_transactions t
left join ss_median03 s03
    on t.code = s03.code and t.date_index = s03.date_index
left join rp_median03 r03
    on t.code = r03.code and t.date_index = r03.date_index
left join ss_median05 s05
    on t.code = s05.code and t.date_index = s05.date_index
left join rp_median05 r05
    on t.code = r05.code and t.date_index = r05.date_index
left join ss_median10 s10
    on t.code = s10.code and t.date_index = s10.date_index
left join rp_median10 r10
    on t.code = r10.code and t.date_index = r10.date_index
;

drop table if exists feature_st_para;
create temp table feature_st_para as select 1
, min(mdn_ss_rk_03) as min_mdn_ss_rk_03 , avg(mdn_ss_rk_03) as avg_mdn_ss_rk_03
, min(mdn_ss_rk_05) as min_mdn_ss_rk_05 , avg(mdn_ss_rk_05) as avg_mdn_ss_rk_05
, min(mdn_ss_rk_10) as min_mdn_ss_rk_10 , avg(mdn_ss_rk_10) as avg_mdn_ss_rk_10
, min(mdn_rp_rk_03) as min_mdn_rp_rk_03 , avg(mdn_rp_rk_03) as avg_mdn_rp_rk_03
, min(mdn_rp_rk_05) as min_mdn_rp_rk_05 , avg(mdn_rp_rk_05) as avg_mdn_rp_rk_05
, min(mdn_rp_rk_10) as min_mdn_rp_rk_10 , avg(mdn_rp_rk_10) as avg_mdn_rp_rk_10
from feature_st;

drop table if exists feature_st_temp;
create temp table feature_st_temp as select code, record_date, date_index
, (mdn_ss_rk_03 - min_mdn_ss_rk_03) / (avg_mdn_ss_rk_03 - min_mdn_ss_rk_03) as mdn_ss_rk_03
, (mdn_ss_rk_05 - min_mdn_ss_rk_05) / (avg_mdn_ss_rk_05 - min_mdn_ss_rk_05) as mdn_ss_rk_05
, (mdn_ss_rk_10 - min_mdn_ss_rk_10) / (avg_mdn_ss_rk_10 - min_mdn_ss_rk_10) as mdn_ss_rk_10
, (mdn_rp_rk_03 - min_mdn_rp_rk_03) / (avg_mdn_rp_rk_03 - min_mdn_rp_rk_03) as mdn_rp_rk_03
, (mdn_rp_rk_05 - min_mdn_rp_rk_05) / (avg_mdn_rp_rk_05 - min_mdn_rp_rk_05) as mdn_rp_rk_05
, (mdn_rp_rk_10 - min_mdn_rp_rk_10) / (avg_mdn_rp_rk_10 - min_mdn_rp_rk_10) as mdn_rp_rk_10
, mdn_ss_rk_10 - mdn_ss_rk_05 as diff_mdn_ss_rk_10_05
, mdn_ss_rk_10 - mdn_ss_rk_03 as diff_mdn_ss_rk_10_03
, mdn_ss_rk_05 - mdn_ss_rk_03 as diff_mdn_ss_rk_05_03
, mdn_rp_rk_10 - mdn_rp_rk_05 as diff_mdn_rp_rk_10_05
, mdn_rp_rk_10 - mdn_rp_rk_03 as diff_mdn_rp_rk_10_03
, mdn_rp_rk_05 - mdn_rp_rk_03 as diff_mdn_rp_rk_05_03
from feature_st cross join feature_st_para;

drop table if exists feature_st_temp_para;
create temp table feature_st_temp_para as select 1
, min(diff_mdn_ss_rk_10_05) as min_diff_mdn_ss_rk_10_05, avg(diff_mdn_ss_rk_10_05) as avg_diff_mdn_ss_rk_10_05
, min(diff_mdn_ss_rk_10_03) as min_diff_mdn_ss_rk_10_03, avg(diff_mdn_ss_rk_10_03) as avg_diff_mdn_ss_rk_10_03
, min(diff_mdn_ss_rk_05_03) as min_diff_mdn_ss_rk_05_03, avg(diff_mdn_ss_rk_05_03) as avg_diff_mdn_ss_rk_05_03
, min(diff_mdn_rp_rk_10_05) as min_diff_mdn_rp_rk_10_05, avg(diff_mdn_rp_rk_10_05) as avg_diff_mdn_rp_rk_10_05
, min(diff_mdn_rp_rk_10_03) as min_diff_mdn_rp_rk_10_03, avg(diff_mdn_rp_rk_10_03) as avg_diff_mdn_rp_rk_10_03
, min(diff_mdn_rp_rk_05_03) as min_diff_mdn_rp_rk_05_03, avg(diff_mdn_rp_rk_05_03) as avg_diff_mdn_rp_rk_05_03
from feature_st_temp;

drop table if exists feature_st_scale;
create temp table feature_st_scale as select code, record_date, date_index
, cast((1/(1+EXP(0-(mdn_ss_rk_03))))*2-1 as decimal(5,3)) as mdn_ss_rk_03
, cast((1/(1+EXP(0-(mdn_ss_rk_05))))*2-1 as decimal(5,3)) as mdn_ss_rk_05
, cast((1/(1+EXP(0-(mdn_ss_rk_10))))*2-1 as decimal(5,3)) as mdn_ss_rk_10
, cast((1/(1+EXP(0-(mdn_rp_rk_03))))*2-1 as decimal(5,3)) as mdn_rp_rk_03
, cast((1/(1+EXP(0-(mdn_rp_rk_05))))*2-1 as decimal(5,3)) as mdn_rp_rk_05
, cast((1/(1+EXP(0-(mdn_rp_rk_10))))*2-1 as decimal(5,3)) as mdn_rp_rk_10
, case when avg_diff_mdn_ss_rk_10_05 = min_diff_mdn_ss_rk_10_05 then 1 else cast((1/(1+EXP(0-(diff_mdn_ss_rk_10_05 - min_diff_mdn_ss_rk_10_05) / (avg_diff_mdn_ss_rk_10_05 - min_diff_mdn_ss_rk_10_05))))*2-1 as decimal(5,3)) end as devided_ss_rk_20_10
, case when avg_diff_mdn_ss_rk_10_03 = min_diff_mdn_ss_rk_10_03 then 1 else cast((1/(1+EXP(0-(diff_mdn_ss_rk_10_03 - min_diff_mdn_ss_rk_10_03) / (avg_diff_mdn_ss_rk_10_03 - min_diff_mdn_ss_rk_10_03))))*2-1 as decimal(5,3)) end as devided_ss_rk_20_05
, case when avg_diff_mdn_ss_rk_05_03 = min_diff_mdn_ss_rk_05_03 then 1 else cast((1/(1+EXP(0-(diff_mdn_ss_rk_05_03 - min_diff_mdn_ss_rk_05_03) / (avg_diff_mdn_ss_rk_05_03 - min_diff_mdn_ss_rk_05_03))))*2-1 as decimal(5,3)) end as devided_ss_rk_10_05
, case when avg_diff_mdn_rp_rk_10_05 = min_diff_mdn_rp_rk_10_05 then 1 else cast((1/(1+EXP(0-(diff_mdn_rp_rk_10_05 - min_diff_mdn_rp_rk_10_05) / (avg_diff_mdn_rp_rk_10_05 - min_diff_mdn_rp_rk_10_05))))*2-1 as decimal(5,3)) end as devided_rp_rk_20_10
, case when avg_diff_mdn_rp_rk_10_03 = min_diff_mdn_rp_rk_10_03 then 1 else cast((1/(1+EXP(0-(diff_mdn_rp_rk_10_03 - min_diff_mdn_rp_rk_10_03) / (avg_diff_mdn_rp_rk_10_03 - min_diff_mdn_rp_rk_10_03))))*2-1 as decimal(5,3)) end as devided_rp_rk_20_05
, case when avg_diff_mdn_rp_rk_05_03 = min_diff_mdn_rp_rk_05_03 then 1 else cast((1/(1+EXP(0-(diff_mdn_rp_rk_05_03 - min_diff_mdn_rp_rk_05_03) / (avg_diff_mdn_rp_rk_05_03 - min_diff_mdn_rp_rk_05_03))))*2-1 as decimal(5,3)) end as devided_rp_rk_10_05
from feature_st_temp cross join feature_st_temp_para;

END

$$;

alter function feature_st() owner to postgres;

